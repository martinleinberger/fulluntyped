%{
open AST
%}

// Start token:
%start start

%token <string> IDENTIFIER
%token TRUE
%token FALSE
%token <string> STRINGV

%token IF
%token THEN
%token ELSE
%token LET
%token IN

%token LAMBDA
%token DOT
%token COMMA
%token EQ
%token LPARENS
%token RPARENS
%token LCURLY
%token RCURLY
%token EOF

// Data produced by successfull reduction of start symbol: 
%type < AST.Toplevel > start

%%


start: File EOF { $1 }



File:
    Term { $1 }

Term:
	| Constant { $1 }
	| LPARENS Term RPARENS	{ $2 }
	| IDENTIFIER    { fun ctx -> TmVar (name2Index ctx $1) }
	| IF Term THEN Term ELSE Term 
        { fun ctx ->
            TmIf ($2 ctx, $4 ctx, $6 ctx) }
    | LET IDENTIFIER EQ Term IN Term
        { fun ctx -> 
            let ctx' = addName ctx $2
            TmLet ($2, $4 ctx, $6 ctx') }
    | LCURLY RecordFields RCURLY { fun ctx -> TmRecord($2 ctx) }
	| LAMBDA IDENTIFIER DOT Term 
		{ fun ctx -> 
            let ctx' = addName ctx $2
            TmAbs ($2, $4 ctx') }
	| Term Term { fun ctx -> TmApp ($1 ctx, $2 ctx) }

Constant:
	| TRUE { fun ctx -> TmTrue }
	| FALSE { fun ctx -> TmFalse }
    | STRINGV { fun ctx -> TmString $1 } 
    
RecordFields:
    Field   { fun ctx -> [$1 ctx] }
    | Field COMMA RecordFields    { fun ctx -> ($1 ctx) :: ($3 ctx) }

Field:
    IDENTIFIER EQ Term  { fun ctx -> ($1, $3 ctx) }
