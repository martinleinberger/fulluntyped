// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | RPARENS
  | LPARENS
  | DOT
  | LAMBDA
  | ELSE
  | THEN
  | IF
  | FALSE
  | TRUE
  | VARIABLE of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RPARENS
    | TOKEN_LPARENS
    | TOKEN_DOT
    | TOKEN_LAMBDA
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_VARIABLE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_File
    | NONTERM_Term
    | NONTERM_Constant

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | RPARENS  -> 1 
  | LPARENS  -> 2 
  | DOT  -> 3 
  | LAMBDA  -> 4 
  | ELSE  -> 5 
  | THEN  -> 6 
  | IF  -> 7 
  | FALSE  -> 8 
  | TRUE  -> 9 
  | VARIABLE _ -> 10 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_RPARENS 
  | 2 -> TOKEN_LPARENS 
  | 3 -> TOKEN_DOT 
  | 4 -> TOKEN_LAMBDA 
  | 5 -> TOKEN_ELSE 
  | 6 -> TOKEN_THEN 
  | 7 -> TOKEN_IF 
  | 8 -> TOKEN_FALSE 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_VARIABLE 
  | 13 -> TOKEN_end_of_input
  | 11 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_File 
    | 3 -> NONTERM_Term 
    | 4 -> NONTERM_Term 
    | 5 -> NONTERM_Term 
    | 6 -> NONTERM_Term 
    | 7 -> NONTERM_Term 
    | 8 -> NONTERM_Term 
    | 9 -> NONTERM_Constant 
    | 10 -> NONTERM_Constant 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 13 
let _fsyacc_tagOfErrorTerminal = 11

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | RPARENS  -> "RPARENS" 
  | LPARENS  -> "LPARENS" 
  | DOT  -> "DOT" 
  | LAMBDA  -> "LAMBDA" 
  | ELSE  -> "ELSE" 
  | THEN  -> "THEN" 
  | IF  -> "IF" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | VARIABLE _ -> "VARIABLE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | RPARENS  -> (null : System.Object) 
  | LPARENS  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LAMBDA  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 13us; 65535us; 0us; 4us; 4us; 20us; 6us; 7us; 7us; 20us; 10us; 11us; 11us; 20us; 12us; 13us; 13us; 20us; 14us; 15us; 15us; 20us; 18us; 19us; 19us; 20us; 20us; 20us; 13us; 65535us; 0us; 5us; 4us; 5us; 6us; 5us; 7us; 5us; 10us; 5us; 11us; 5us; 12us; 5us; 13us; 5us; 14us; 5us; 15us; 5us; 18us; 5us; 19us; 5us; 20us; 5us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 19us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 8us; 1us; 3us; 1us; 4us; 2us; 4us; 8us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 8us; 1us; 6us; 2us; 6us; 8us; 1us; 6us; 2us; 6us; 8us; 1us; 7us; 1us; 7us; 1us; 7us; 2us; 7us; 8us; 2us; 8us; 8us; 1us; 9us; 1us; 10us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 18us; 20us; 22us; 24us; 27us; 29us; 32us; 34us; 37us; 39us; 41us; 43us; 46us; 49us; 51us; |]
let _fsyacc_action_rows = 23
let _fsyacc_actionTableElements = [|6us; 32768us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 6us; 16386us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 0us; 16387us; 6us; 32768us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 7us; 32768us; 1us; 8us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 0us; 16388us; 0us; 16389us; 6us; 32768us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 7us; 32768us; 2us; 6us; 4us; 16us; 6us; 12us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 6us; 32768us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 7us; 32768us; 2us; 6us; 4us; 16us; 5us; 14us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 6us; 32768us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 6us; 16390us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 1us; 32768us; 10us; 17us; 1us; 32768us; 3us; 18us; 6us; 32768us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 6us; 16391us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 6us; 16392us; 2us; 6us; 4us; 16us; 7us; 10us; 8us; 22us; 9us; 21us; 10us; 9us; 0us; 16393us; 0us; 16394us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 7us; 8us; 10us; 11us; 18us; 19us; 26us; 34us; 35us; 36us; 43us; 51us; 58us; 66us; 73us; 80us; 82us; 84us; 91us; 98us; 105us; 106us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 3us; 1us; 6us; 4us; 2us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 16394us; |]
let _fsyacc_reductions ()  =    [| 
# 139 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  AST.Toplevel )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 148 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'File)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                       _1 
                   )
# 33 "Parser.fsy"
                 :  AST.Toplevel ));
# 159 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                             _1 
                   )
# 38 "Parser.fsy"
                 : 'File));
# 170 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                   _1 
                   )
# 41 "Parser.fsy"
                 : 'Term));
# 181 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                               _2 
                   )
# 42 "Parser.fsy"
                 : 'Term));
# 192 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                   fun ctx -> TmVar (name2Index ctx _1) 
                   )
# 43 "Parser.fsy"
                 : 'Term));
# 203 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                      fun ctx -> TmIf (_2 ctx, _4 ctx, _6 ctx)
                   )
# 44 "Parser.fsy"
                 : 'Term));
# 216 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                         fun ctx -> 
                                 let ctx' = addName ctx _2
                                 TmAbs (_2, _4 ctx') 
                   )
# 46 "Parser.fsy"
                 : 'Term));
# 230 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                    fun ctx -> TmApp (_1 ctx,_2 ctx) 
                   )
# 49 "Parser.fsy"
                 : 'Term));
# 242 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                               fun ctx -> TmTrue 
                   )
# 52 "Parser.fsy"
                 : 'Constant));
# 252 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                fun ctx -> TmFalse 
                   )
# 53 "Parser.fsy"
                 : 'Constant));
|]
# 263 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 14;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  AST.Toplevel  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
